{"version":3,"sources":["services/Logger.js","services/utils.js","svg/base.js","svg/SVG.js","svg/G.js","svg/Defs.js","svg/path.js","svg/Title.js","svg/Text.js","svg/Circle.js","svg/index.js","components/Plot/Grid.js","components/Plot/Popup.js","components/Plot/Select.js","components/Plot/index.js","components/Preview/Slider.js","components/Preview/index.js","data/chart_data.json","data/graph.js","index.js","../node_modules/parcel-bundler/src/builtins/bundle-url.js","../node_modules/parcel-bundler/src/builtins/bundle-loader.js","../node_modules/parcel-bundler/src/builtins/loaders/browser/html-loader.js"],"names":["Logger","prefix","defaultLogLevel","_logLevel","_prefix","logLevel","args","Array","prototype","slice","call","arguments","concat","console","log","apply","warn","error","Utils","isObject","value","type","isString","isArray","arr","filter","a","cb","c","forIn","obj","k","first","i","ceil","val","acc","zeros","Math","pow","forEach","length","closestPath","BaseSVG","DOM","constructor","undefined","id","name","tagName","LOG_LEVEL","_DOM","params","_","v","_element","setAttribute","getAttribute","parentElement","opts","config","__draw","createElementNS","NS","_parentElement","append","str","attr","svg","parentNode","appendChild","element","childNodes","removeChild","SVG","DEFAULT_WIDTH","DEFAULT_HEIGHT","window","document","_rootElement","_width","_height","rootElement","xmlns","XLINK_NS","_getWidth","_getHeight","fillIn","getBoundingClientRect","width","height","G","Defs","Path","doc","x","y","d","Title","innerHTML","Text","_text","Circle","Grid","yAxisCount","xAxisCount","yPadding","_svg","_lines","_drawAxis","minXValue","maxXValue","maxYValue","yStep","title","text","xStep","points","point","timestamp","g","_g","draw","axises","axis","_drawXAxis","push","index","transform","className","xAxis","scale","Popup","_render","info","style","display","top","_info","remove","_title","row","node","_createRow","color","createElement","docFrag","createDocumentFragment","Select","data","querySelector","addEventListener","e","checked","target","checkbox","label","Plot","scaleX","scaleY","_data","_grid","_popup","_select","ownerDocument","clean","_graph","enabled","_drawData","path","preview","subscribe","x1","x2","xRatio","scaledData","localX1","_graphScale","_graphTranslate","_graphX1","_onDrawData","bind","_bindUI","proportion","updateTitles","_getPlotHeight","scaleTo","coords","moveTo","lineTo","stroke","add","enable","disable","dataId","offsetX","_selectCoord","__path","__highlight","Date","toDateString","offsetTop","show","pos","abs","closest","_selectPath","_showPopup","values","start","end","yRatio","_highlightPath","cx","cy","r","circle","Slider","defaultConfig","sliderX","sliderWidth","sliderMinWidth","_parentNode","UI","left","overflowLeft","right","overflowRight","mid","_initUI","offsetLeft","leftWidth","eventType","_subs","subs","sub","overflowRightWidth","rightWidth","_bindSlider","clientX","overflowLeftWidth","diff","midWidth","emit","getVisibleRange","movementX","prevMidWidth","self","stopDrag","removeEventListener","moveListener","initDrag","Preview","html","currentNode","firstChild","_x1","_x2","_slider","slider","__subs","_drawPath","previewNode","svgId","drawOn","xPadding","module","exports","columns","types","y0","y1","names","colors","y2","y3","GraphData","Symbol","iterator","xValues","yValues","_values","_coords","_minXValue","_maxXValue","_minYValue","_maxYValue","_color","_name","xValue","yValue","sort","b","xRange","yRange","next","done","render","inited","app","getElementById","plot","lines","Error","datas","yName","graphData","linkWith","bundleURL","getBundleURLCached","getBundleURL","err","matches","stack","match","getBaseURL","url","replace","require","loadBundlesLazy","bundles","Promise","resolve","code","LazyPromise","reject","loadBundles","then","all","map","loadBundle","bundleLoaders","registerBundleLoader","loader","load","register","bundle","substring","lastIndexOf","toLowerCase","bundleLoader","resolved","catch","executor","promise","onSuccess","onError","fetch","res"],"mappings":"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W,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,YAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,KAAK,KAAK,MAAM,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,KAA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AW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,YAAY,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAKC,MAAM,CAACC,GAAG,OAAOC,GAAG,OAAOhL,EAAE,KAAKiL,MAAM,CAACF,GAAG,KAAKC,GAAG,MAAME,OAAO,CAACH,GAAG,UAAUC,GAAG,YAAY,CAACH,QAAQ,CAAC,CAAC,IAAI,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,QAAQ,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,QAAQ,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,QAAQ,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,SAAS,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,YAAY,CAAC,KAAK,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,MAAM,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,MAAM,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,KAAK,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,CAAC,KAAK,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,CAAC,KAAK,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,QAAQ,QAAQ,OAAO,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,OAAO,OAAO,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,OAAO,OAAO,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,OAAO,OAAO,QAAQ,OAAO,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,SAAS,CAAC,KAAK,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO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","file":"src.dd13b274.js","sourceRoot":"../src","sourcesContent":["class Logger {\n\n  constructor(prefix, defaultLogLevel = 0) {\n    this._logLevel = defaultLogLevel;\n    this._prefix = prefix;\n  }\n\n  log(logLevel) {\n    let args = Array.prototype.slice.call(arguments, 1);\n    args = [this._prefix, \":: \"].concat(args)\n    console.log.apply(console, args);\n  }\n\n  warn() {\n    let args = Array.prototype.slice.call(arguments, 0);\n    args = [this._prefix, \":: \"].concat(args)\n    console.warn.apply(console, args);\n  }\n\n  error() {\n    let args = Array.prototype.slice.call(arguments, 0);\n    args = [this._prefix, \":: \"].concat(args)\n    console.error.apply(console, args);\n  }\n}\n\nexport default Logger\n","const Utils = {\n  // https://github.com/lodash/lodash/blob/750067f42d3aa5f927604ece2c6df0ff2b2e9d72/isObject.js\n  isObject: (value) => {\n    const type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  },\n\n  isString: (value) => {\n    return typeof value == 'string'\n  },\n\n  isArray: (arr) => {\n    return Array.isArray(arr);\n  },\n\n  filter: (a, cb) => {\n    return Array.prototype.filter.call(a, c);\n  },\n\n  forIn: (obj, cb) => {\n    if (!cb) return;\n\n    for (let k in obj) {\n      cb(obj[k], k);\n    }\n  },\n\n  first: (obj) => {\n    for (let i in obj) {\n      return obj[i];\n    }\n  },\n\n  ceil(val, acc) {\n    if (acc) {\n      let zeros = Math.pow(10, acc);\n      return Math.ceil(val * zeros) / zeros;\n    } else {\n      return Math.ceil(val);\n    }\n  },\n\n  forEach: (arr, cb) => {\n    if (!cb || !arr) return;\n\n    for (let i = 0, length = arr.length; i < length; i++) {\n      cb(arr[i], i);\n    }\n  },\n\n  closestPath() {\n\n  }\n}\n\nexport default Utils\n","import _ from '../services/utils'\nimport Logger from '../services/Logger'\n\nclass BaseSVG {\n  static NS = \"http://www.w3.org/2000/svg\"\n  static XLINK_NS = \"http://www.w3.org/1999/xlink\"\n\n  constructor(DOM) {\n    const c = this.constructor;\n    if (c.id === undefined) {\n      c.id = 0;\n    }\n    c.id++;\n\n    let name = c.tagName ? `<${c.tagName}/>` : c.name;\n    this.console = new Logger(`${name} #${c.id}`, c.LOG_LEVEL);\n    this._DOM = DOM\n  }\n\n  /**\n   * @param {Object|String} params\n   * @return {Object|any} this|value\n   */\n  attr(params) {\n    if (_.isObject(params)) {\n      _.forIn(params, (v, k) => {\n        this._element.setAttribute(k, v);\n      })\n      return this;\n    }\n\n    if (_.isString(params)) {\n      return this._element.getAttribute(params)\n    }\n\n    return this;\n  }\n\n  draw(parentElement, opts, config) {\n    return this.__draw(parentElement, opts, config);\n  }\n\n  __draw(parentElement, opts, config) {\n    const c = this.constructor;\n    this._element = this._DOM.createElementNS(c.NS, c.tagName);\n    this._parentElement = parentElement;\n\n    parentElement.append(this._element)\n    return this;\n  }\n  /**\n   * @param {String} str\n   */\n  className(str) {\n    return this.attr({'class': str});\n  }\n\n  /**\n   * @param {BaseSVG} svg\n   */\n  add(svg) {\n    this._element.parentNode.appendChild(svg.element);\n  }\n\n  /**\n   * @param {BaseSVG} svg\n   */\n  append(svg) {\n    this._element.appendChild(svg.element);\n  }\n\n  clean() {\n    let childNodes = this._element.childNodes;\n    let element = this._element;\n    while (childNodes.length) {\n      element.removeChild(childNodes[0]);\n    }\n  }\n\n  get element() { return this._element;  }\n}\n\nexport default BaseSVG\n","import Logger from '../services/Logger'\nimport BaseSVG from './base'\n\nconst DEFAULT_WIDTH = 500;\nconst DEFAULT_HEIGHT = 300;\n\nclass SVG extends BaseSVG {\n  static NS = \"http://www.w3.org/2000/svg\"\n  static id = 0\n\n\n  constructor(DOM = window && window.document) {\n    super();\n    SVG.id++;\n\n    this.console = new Logger(`SVG #${SVG.id}`)\n\n    this._DOM = DOM\n    this._element = null\n    this._rootElement = null;\n    this._width = null;\n    this._height = null;\n  }\n\n  /**\n   * @param {DOMElement} rootElement\n   * @param {Object} opts\n   *  @key {String|Number} width\n   *  @key {String|Number} height\n\t *  @key {Boolean} fillIn\n   * @param {Object} config\n   *  @key {String} id\n   */\n  draw(rootElement, opts = {}, config = {}) {\n    this._element = this._DOM.createElementNS(SVG.NS, 'svg');\n    this.attr({\n      xmlns: SVG.NS,\n      \"xmlns:xlink\": SVG.XLINK_NS,\n      id: config.id || `svg-${SVG.id}`\n    })\n    this._rootElement = rootElement;\n\n\t\tthis._width = this._getWidth(opts);\n\t\tthis._height = this._getHeight(opts);\n    console.log(this._width, opts);\n    this._element.setAttribute('width',this._width);\n    this._element.setAttribute('height', this._height);\n\n    rootElement.append(this._element)\n\n    return this;\n  }\n\n\t_getWidth(opts) {\n    if (opts.fillIn) {\n      let { width } = this._rootElement.getBoundingClientRect();\n      return width;\n    }\n\n    return opts.width || DEFAULT_WIDTH\n\t}\n  \n  _getHeight(opts) {\n    if (opts.fillIn) {\n      let { height } = this._rootElement.getBoundingClientRect();\n      return height;\n    }\n\n    return opts.height || DEFAULT_HEIGHT\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n}\n\nexport default SVG;\n","import Logger from '../services/Logger'\nimport BaseSVG from './base'\n\nclass G extends BaseSVG {\n  static LOG_LEVEL = 0;\n  static tagName = 'g';\n\n  constructor(DOM = window && window.document) {\n    super(DOM);\n\n    this._element = null\n    this._parentElement = null;\n  }\n\n  /**\n   * @param {DOMElement} parentElement\n   * @param {Object} opts\n   *  @key {String} id\n   */\n  draw(parentElement, opts = {}, config = {}) {\n    this.__draw(parentElement, opts, config);\n\n    if (config.id !== undefined)\n      this.attr({ id: config.id });\n\n    return this;\n  }\n}\n\nexport default G;\n","import BaseSVG from './base'\n\nclass Defs extends BaseSVG {\n  static id = 0;\n  static LOG_LEVEL = 0;\n  static tagName = 'defs';\n\n  constructor(DOM = window && window.document) {\n    super(DOM);\n  }\n\n  /**\n   * @param {DOMElement} parentElement\n   * @param {Object} opts\n   *  @key {String} id\n   */\n  draw(parentElement, opts = {}, config = {}) {\n    this.__draw(parentElement, opts, config);\n\n    if (config.id !== undefined)\n      this.attr({ id: config.id });\n\n    return this;\n  }\n}\n\nexport default Defs;\n","import Logger from '../services/Logger'\nimport _ from '../services/utils'\n\nimport BaseSVG from './base'\n\nclass Path extends BaseSVG {\n  static id = 0\n  static tagName = 'path'\n\n  constructor(doc = window && window.document) {\n    super(doc)\n    this.console = new Logger(`<path #${Path.id}/>`)\n    Path.id++;\n\n    this._element = doc.createElementNS(Path.NS, 'path');\n  }\n\n  moveTo (x, y) {\n    let d = this.attr('d') || '';\n    this.attr({d: `${d} M ${x} ${y}`});\n    return this;\n  }\n\n  lineTo (x, y) {\n    let d = this.attr('d') || '';\n    this.attr({d: `${d} L ${x} ${y}`});\n    return this;\n  }\n}\n\nexport default Path\n","import BaseSVG from './base'\n\nclass Title extends BaseSVG {\n  static id = 0;\n  static LOG_LEVEL = 0;\n  static tagName = 'title';\n\n  constructor(DOM = window && window.document) {\n    super(DOM);\n  }\n\n  /**\n   * @param {DOMElement} parentElement\n   * @param {Object} opts\n   *  @key {String} id\n   */\n  draw(parentElement, opts = {}, config = {}) {\n    this.__draw(parentElement, opts, config);\n\n    if (config.id !== undefined)\n      this.attr({ id: config.id });\n\n    return this;\n  }\n\n  text(value) {\n    this.element.innerHTML = value;\n  }\n}\n\nexport default Title;\n","import BaseSVG from './base'\n\nclass Text extends BaseSVG {\n  static LOG_LEVEL = 0;\n  static tagName = 'text';\n\n  constructor(DOM = window && window.document) {\n    super(DOM);\n  }\n\n  text(value) {\n    if (value == this._text)\n      return;\n\n    this._element.innerHTML = value;\n    this._text = value;\n  }\n}\n\nexport default Text\n","import Logger from '../services/Logger'\nimport BaseSVG from './base'\n\nclass Circle extends BaseSVG {\n  static LOG_LEVEL = 0;\n  static tagName = 'circle';\n\n  constructor(DOM = window && window.document) {\n    super(DOM);\n\n    this._element = null\n    this._parentElement = null;\n  }\n\n  /**\n   * @param {DOMElement} parentElement\n   * @param {Object} opts\n   *  @key {String} id\n   */\n  draw(parentElement, opts = {}, config = {}) {\n    this.__draw(parentElement, opts, config);\n\n    return this;\n  }\n}\n\nexport default Circle;\n","import G from './G'\nimport Defs from './Defs'\nimport Path from './path'\nimport SVG from './SVG'\nimport Title from './Title'\nimport Text from './Text'\nimport Circle from './Circle'\n\nexport {\n  Circle, Defs, G, Path, SVG, Text, Title\n}\n","import { G, Path, Text } from '../../svg/index'\nimport _ from '../../services/utils'\n\nconst yAxisCount = 6;\nconst xAxisCount = 0;\nconst yPadding = 20;\n\nclass Grid {\n  constructor(svg) {\n    this._svg = svg;\n\n    this._lines = this._drawAxis();\n  }\n\n  updateTitles(minXValue, maxXValue, maxYValue) {\n\n    // TODO: normalize\n    let yStep = _.ceil(maxYValue / yAxisCount);\n    _.forEach(this._lines, (v, i) => {\n      v.title.text(i * yStep);\n    })\n\n    let xStep = (maxXValue - minXValue) / xAxisCount;\n    _.forEach(this._lines[0].points, (point, i) => {\n      // TODO: dependency on data, move out\n      let timestamp = i * xStep\n\n      point.text(timestamp)\n    });\n  }\n\n  get element() {\n    return this._g.element;\n  }\n\n  clean() {\n  }\n\n  _drawAxis() {\n    let g = new G();\n    this._g = g;\n    g.draw(this._svg.element);\n    let axises = [];\n\n    for (let i = 0; i < yAxisCount; i++) {\n      let axis = this._drawXAxis(g.element, i);\n      axises.push(axis);\n    }\n\n    return axises;\n  }\n\n  _drawXAxis(parentElement, index) {\n    let height = this._getHeight();\n    let width = this._getWidth();\n\n    let y = height - ((height - yPadding) / yAxisCount) * (index)\n\n    let g = new G();\n    g.draw(parentElement)\n      .attr({\n        transform: `translate(0, ${y})`\n      })\n      .className('axis x_axis');\n\n    let xAxis = new Path();\n    xAxis\n      .attr({\n        d: `M 0 0 L ${width} 0`,\n      })\n\n    g.append(xAxis);\n\n    let title = new Text();\n    title\n      .draw(g.element)\n      .attr({\n        y: -2\n      })\n\n    if (index != 0) {\n      return {\n        title: title,\n        g: g\n      }\n    }\n\n    // draw based axis\n    let points = []\n    for (let i = 0; i < xAxisCount; i++) {\n      let x = (width / xAxisCount) * (i + 1)\n      let title = new Text();\n      title\n        .draw(g.element)\n        .attr({\n          x: x,\n          y: 0\n        })\n      if (i == (xAxisCount - 1)) {\n        title.attr({'text-anchor': 'end'});\n      }\n      points.push(title);\n    }\n\n    return {\n      title: title,\n      g: g,\n      points: points\n    }\n  }\n\n  _getWidth() {\n    return this._svg.element.getBoundingClientRect().width;\n  }\n\n  _getHeight(scale) {\n    return this._svg.element.getBoundingClientRect().height - yPadding;\n  }\n\n}\n\nexport default Grid\n","import _ from '../../services/utils'\n\nclass Popup {\n  constructor(DOM = window && window.document) {\n    this._DOM = DOM;\n  }\n\n  draw(parentElement) {\n    this._parentElement = parentElement;\n    this._render(parentElement);\n  }\n\n  /**\n   * @param {Object} info\n   *  @key {String} name\n   *  @key {Number} value\n   *  @key {String} color\n   */\n  show(x, y, title, info) {\n    this._element.style.display = 'block';\n    this._element.style.top = `${x}px`;\n    while (this._info.childNodes.length != 0) {\n        this._info.childNodes[0].remove();\n    }\n\n    this._title.innerHTML = title;\n    _.forIn(info, row => {\n      let node = this._createRow(row.name, row.value, row.color);\n      this._info.appendChild(node);\n    })\n  }\n\n  hide() {\n    this._element.style.display = 'none';\n  }\n\n  _createRow(text, value, color) {\n    let element = this._DOM.createElement('div')\n    element.setAttribute('class', 'row');\n    element.style.color = color;\n    let prefix = this._DOM.createElement('span')\n    prefix.innerHTML = text;\n    element.appendChild(prefix);\n\n    let v = this._DOM.createElement('span');\n    v.innerHTML = value;\n    element.appendChild(v)\n    return element;\n  }\n\n  _render(parentElement) {\n    let docFrag = this._DOM.createDocumentFragment();\n    let element = this._DOM.createElement('div');\n    element.setAttribute('class', 'popup');\n\n    docFrag.appendChild(element);\n    let title = this._DOM.createElement('span')\n    title.setAttribute('class', 'title');\n    this._title = title;\n    element.appendChild(title);\n\n    let info = this._DOM.createElement('div');\n    this._info = info;\n    element.appendChild(info);\n\n    this._element = element;\n    parentElement.appendChild(element);\n  }\n}\n\nexport default Popup;\n","import _ from '../../services/utils'\n\nclass Select {\n  constructor(DOM = window && window.document) {\n    this._DOM = DOM;\n  }\n\n  draw(parentElement) {\n    this._parentElement = parentElement;\n\n    let docFrag = this._DOM.createDocumentFragment();\n    let element = this._DOM.createElement('div');\n    element.setAttribute('class', 'select');\n    parentElement.appendChild(element);\n    this._element = element;\n  }\n\n  clean() {\n    while (this._element.childNodes.length !== 0) {\n      this._element.childNodes[0].remove();\n    }\n  }\n\n  /**\n   * @param {Object} data\n   *  @key {String} id\n   *  @key {String} name\n   *  @key {String} color\n   */\n  add(data, cb) {\n    let element = this._createRow(data.id, data.name, data.color);\n    this._element.appendChild(element);\n    element.querySelector('input[type=\"checkbox\"]').addEventListener('click', (e) => {\n      let checked = e.target.checked;\n      cb && cb(checked);\n    });\n  }\n\n  _createRow(id, title, color) {\n    let element = this._DOM.createElement('div')\n    element.setAttribute('class', 'row');\n    element.style.color = color;\n\n    let checkbox = this._DOM.createElement('input');\n    checkbox.setAttribute('type', 'checkbox');\n    checkbox.setAttribute('checked', true);\n    checkbox.setAttribute('id', id);\n    element.appendChild(checkbox);\n\n    let label = this._DOM.createElement('label');\n    label.setAttribute('for', id);\n    label.innerHTML = title;\n    element.appendChild(label);\n    return element;\n  }\n\n}\n\nexport default Select;\n","import Logger from '../../services/Logger'\nimport _ from '../../services/utils'\n\nimport Grid from './Grid'\nimport Popup from './Popup'\nimport Select from './Select'\n\nimport { Circle, Defs, G, Path } from '../../svg/index'\n\nimport './styles.css'\n\nconst DEFAULT_WIDTH = 500;\nconst DEFAULT_HEIGHT = 300;\nconst yPadding = 20;\n\nclass Plot {\n  static id = 0\n  static LOG_LEVEL = 0\n\n  config = {\n    scaleX: 1,\n    scaleY: 1\n  }\n\n  constructor(svg) {\n    Plot.id++;\n    this.console = new Logger(`Plot #${Plot.id}`, Plot.LOG_LEVEL);\n\n    this._svg = svg;\n    this._svg.className('plot')\n    this._data = {}\n\n    this._grid = new Grid(svg);\n    this._popup = new Popup();\n    this._popup.draw(this._svg.element.parentNode);\n    this._select = new Select();\n    this._select.draw(this._svg.element.parentNode);\n  }\n\n  /**\n   * @param {Object} opts\n   *  @key {String} width\n   *  @key {String} height\n   * @param {Object} config\n   *  @key {Number} positionX (default = 0)\n   *  @key {Number} positionY (default = 0)\n   *  @key {Number} scaleX (default = 1)\n   *  @key {Number} scaleY (default = 1)\n   */\n  draw(opts = {}, config) {\n    const doc = this._svg.element.ownerDocument;\n    const DOM = doc.createDocumentFragment();\n\n    const padding = 10;\n    let width = opts.width || DEFAULT_WIDTH;\n    let height = opts.height || DEFAULT_HEIGHT;\n  }\n\n  clean() {\n    this._data = {};\n    this._grid.clean();\n    this._graph && this._graph.clean();\n    this._select.clean();\n  }\n\n  enable(id) {\n    let data = this._data[id];\n    if (!data)\n      return;\n\n    if (data.enabled)\n      return;\n\n    this._drawData(id);\n  }\n\n  disable(id) {\n    let data = this._data[id];\n    if (!data)\n      return;\n\n    if (!data.enabled)\n      return;\n\n    data.path.element.remove();\n    data.path = null;\n    data.enabled = false;\n  }\n  /**\n   * @param {components/Preview} preview\n   */\n  linkWith(preview) {\n    preview.subscribe('onScale', (data, [x1, x2], [xRatio, yRatio]) => {\n      let scaledData = this._data[data.id].scaledData;\n      let graphData = this._data[data.id].data;\n\n      let localX1 = (x1 / xRatio) * scaledData.xRatio;\n      let width = this._svg.element.getBoundingClientRect().width;\n      let scale = _.ceil((width / scaledData.xRatio) / ((x2 - x1) / xRatio), 3)\n      if (scale == this._graphScale)\n        return;\n\n      this._graphTranslate = -localX1 * scale;\n      this._graphScale = scale;\n      //TODO:\n      this._graphX1 = x1;\n      this._graph.attr({\n        transform: `translate(${this._graphTranslate} 0) scale(${this._graphScale} 1)`\n      })\n    })\n\n    preview.subscribe('onChange', (data, [x1, x2], [xRatio, yRatio]) => {\n      let scaledData = this._data[data.id].scaledData;\n      let graphData = this._data[data.id].data;\n\n      let localX1 = (x1 / xRatio) * scaledData.xRatio;\n      this._graphTranslate = -localX1 * this._graphScale;\n      //TODO:\n      this._graphX1 = x1;\n      this._graph.attr({\n        transform: `translate(${this._graphTranslate} 0) scale(${this._graphScale} 1)`\n      })\n    })\n\n\n    preview.subscribe('onDraw', this._onDrawData.bind(this, preview));\n    this._bindUI();\n  }\n\n  /**\n   * All datas MUST have the same dimensions!\n   */\n  _onDrawData(preview, data, [x1, x2], [xRatio, yRatio], proportion) {\n    this._data[data.id] = {data: data, proportion: proportion, xRatio: xRatio};\n\n    this._grid.updateTitles(null, null, data.maxYValue);\n\n    if (!this._graph) {\n      this._graph = new G();\n      this._graph\n        .draw(this._svg.element)\n    }\n\n    let height = this._getPlotHeight();\n    let width = height * proportion\n\n    let scaledData = data.scaleTo(width, height);\n    this._data[data.id].scaledData = scaledData;\n    if (scaledData.proportion !== proportion) {\n      this.console.error(`Something wrong with proprotions: ${scaledData.proportion} and ${proportion}`)\n    }\n\n    let { coords } = scaledData;\n    let [x, y] = coords[0]\n    let path = new Path();\n    path.draw(this._graph.element);\n    path.moveTo(x, y);\n    for (let i = 1, length = coords.length; i < length; i++) {\n      let [x, y] = coords[i];\n      path.lineTo(x, y);\n    }\n\n    path\n      .className('line')\n      .attr({stroke: data.color})\n      .attr({transform: `scale(1, -1) translate(0, -${height})`})\n\n    this._data[data.id].path = path;\n    this._data[data.id].enabled = true;\n    x1 = (x1 / xRatio) * scaledData.xRatio;\n    this._graphTranslate = -x1;\n    this._graphScale = 1;\n\n    this._graph.attr({\n      transform: `translate(${this._graphTranslate} 0)`\n    })\n\n    this._select.add(data, (enable) => {\n      if (enable) {\n        preview.enable(data.id);\n        //this.enable(data.id)\n      } else {\n        preview.disable(data.id);\n        //this.disable(data.id)\n      }\n    });\n  }\n\n  /**\n   * TODO: Not implemented\n   */\n  _drawData(dataId) {\n    let data = this._data[dataId]\n    let scaledData = data.scaledData;\n\n    //this._grid.updateTitles(null, null, data.maxYValue);\n\n    if (!this._graph) {\n      this._graph = new G();\n      this._graph\n        .draw(this._svg.element)\n    }\n\n    let height = this._getPlotHeight();\n    let width = height * data.proportion\n\n    let { coords } = scaledData;\n    let [x, y] = coords[0]\n    let path = new Path();\n    path.draw(this._graph.element);\n    path.moveTo(x, y);\n    for (let i = 1, length = coords.length; i < length; i++) {\n      let [x, y] = coords[i];\n      path.lineTo(x, y);\n    }\n\n    path\n      .className('line')\n      .attr({stroke: data.data.color})\n      .attr({transform: `scale(1, -1) translate(0, -${height})`})\n\n    this._data[dataId].path = path;\n    this._data[dataId].enabled = true;\n\n    let x1 = (this._graphX1 / data.xRatio) * scaledData.xRatio;\n    this._graphTranslate = -x1;\n    this._graphScale = this._graphScale || 1;\n\n    this._graph.attr({\n      transform: `translate(${this._graphTranslate} 0)`\n    })\n  }\n\n  _getPlotWidth() {\n    return this._svg.element.getBoundingClientRect().width;\n  }\n\n  _getPlotHeight() {\n    let height = this._svg.element.getBoundingClientRect().height;\n    return height - yPadding;\n  }\n\n  _bindUI() {\n    this._svg.element.addEventListener('mousemove', (e) => {\n      let x = e.offsetX\n      this._selectCoord(x);\n    });\n\n    this._svg.element.addEventListener('mouseleave', (e) => {\n      //TODO: refactor\n      this._graph.__path.element.remove();\n      this._graph.__path = null;\n      _.forIn(this._data, ({path}) => {\n        path.__highlight.element.remove();\n        path.__highlight = null;\n      });\n    })\n  }\n\n  _showPopup(timestamp, x, info) {\n    let title = new Date(timestamp).toDateString();\n    x = this._svg.element.parentNode.offsetTop + 10;\n\n    this._popup.show(x, null, title, info);\n  }\n\n  _selectCoord(x) {\n    let pos = (x + Math.abs(this._graphTranslate)) / this._graphScale;\n    let timestamp;\n\n    let info = []\n    _.forIn(this._data, ({ data, scaledData, path }) => {\n      timestamp = data.minXValue + (pos / scaledData.xRatio);\n      let closest = this._selectPath(data, scaledData, path, timestamp);\n\n      info.push({\n        name: data.name,\n        value: closest[1],\n        color: data.color\n      })\n    })\n\n    this._showPopup(timestamp, x, info);\n  }\n\n  /**\n   * TODO: improve speed\n   */\n  _selectPath(data, scaledData, path, timestamp) {\n    let values = data.values;\n    let i = 0;\n    for (i = 1, length = values.length; i < length; i++) {\n      if (values[i][0] > timestamp) {\n        break;\n      }\n    }\n    let start = i > 1 ? values[i - 1] : values[0];\n    let end = i == values.length ? values[i - 1] : values[i]\n    let closest = (end[0] - timestamp) > (timestamp - start[0]) ? start : end;\n\n    let height = this._getPlotHeight()\n    let x = (closest[0] - data.minXValue) * scaledData.xRatio;\n    let y = height - (closest[1] * scaledData.yRatio);\n\n    this._highlightPath(path, x, y);\n    return closest;\n  }\n\n  //TODO: refactor\n  _highlightPath(path, x, y) {\n\n    if (path.__highlight) {\n      let circle = path.__highlight;\n      circle\n        .attr({\n          cx: x,\n          cy: y,\n          r: 4,\n          stroke: path.attr('stroke'),\n        })\n        .className('highlight')\n\n      {\n        let path = this._graph.__path;\n        path\n          .attr({'d': `M ${x} 0`})\n          .lineTo(x, this._getPlotHeight());\n      }\n      return;\n    }\n\n    let circle = new Circle();\n    circle.draw(this._graph.element);\n    path.__highlight = circle;\n    if (!this._graph.__path) {\n      let path = new Path()\n      path.draw(this._graph.element);\n      path.moveTo(x, 0)\n        .lineTo(x, this._getPlotHeight())\n        .className('highlight_line')\n      this._graph.__path = path;\n    }\n    this._highlightPath(path, x, y);\n  }\n}\n\nexport default Plot\n","import _ from '../../services/utils'\n\nconst defaultConfig = {\n  sliderX: 12,\n  sliderWidth: 200,\n  sliderMinWidth: 100\n}\n\nclass Slider {\n  /**\n   * @param {DOMElement} parentNode\n   * @key {Object} slider\n   *  @key {Number} sliderX\n   *  @key {Number} sliderWidth\n   *  @key {Number} sliderMinWidth\n   */\n  constructor(parentNode, config = defaultConfig) {\n    this._parentNode = parentNode;\n\n    this.UI = {\n      left: this._parentNode.querySelector('.slider_left'),\n      overflowLeft: this._parentNode.querySelector('.overflow_left'),\n      right: this._parentNode.querySelector('.slider_right'),\n      overflowRight: this._parentNode.querySelector('.overflow_right'),\n      mid: this._parentNode.querySelector('.slider_mid'),\n    }\n\n    this._initUI(config);\n  }\n\n  /**\n   * @param {Array} coords\n   *  @0 {Number} x1\n   *  @1 {Number} x2\n   */\n  getVisibleRange() {\n    const { width } = this.UI.mid.getBoundingClientRect();\n    const left = this.UI.mid.offsetLeft;\n    const leftWidth = this.UI.left.getBoundingClientRect().width;\n\n    return [left - leftWidth, width + left - leftWidth];\n  }\n\n  /**\n   * PubSub mixin\n   */\n  subscribe(eventType, cb) {\n    if (!this._subs)\n      this._subs = {};\n\n    let subs = this._subs[eventType] || [];\n    subs.push(cb);\n\n    this._subs[eventType] = subs;\n  }\n\n  emit(eventType) {\n    if (!this._subs)\n      this._subs = {};\n\n    let subs = this._subs[eventType];\n    let args = Array.prototype.slice.call(arguments, 1);\n    _.forEach(subs, sub => {\n      sub.apply(null, args);\n    });\n  }\n\n\n  _initUI(config = defaultConfig) {\n    const { left, right, mid, overflowLeft, overflowRight } = this.UI;\n\n    const width = mid.parentNode.getBoundingClientRect().width;\n    const leftWidth = left.getBoundingClientRect().width;\n    const rightWidth = left.getBoundingClientRect().width;\n\n    mid.style.width = `${config.sliderWidth + leftWidth}px`;\n    overflowLeft.style.width = `${config.sliderX}px`\n    let overflowRightWidth = width - config.sliderWidth - config.sliderX - leftWidth;\n    overflowRight.style.width = `${overflowRightWidth}px`\n\n    this._bindUI(config);\n  }\n\n  _bindUI(config = defaultConfig) {\n    const { left, right, mid, overflowLeft, overflowRight } = this.UI;\n\n    const width = mid.parentNode.getBoundingClientRect().width;\n    const leftWidth = left.getBoundingClientRect().width;\n    const rightWidth = right.getBoundingClientRect().width;\n\n    this._bindSlider(left, (e) => {\n      let x = e.clientX - leftWidth;\n      if (x < 0) x = 0;\n\n      let overflowLeftWidth = x + leftWidth;\n      let diff = overflowLeft.getBoundingClientRect().width - overflowLeftWidth;\n      let midWidth = mid.getBoundingClientRect().width + diff;\n      if (midWidth <= config.sliderMinWidth) {\n        overflowLeftWidth += (midWidth - config.sliderMinWidth);\n        midWidth = config.sliderMinWidth;\n      }\n\n      overflowLeft.style.width = `${overflowLeftWidth}px`;\n      mid.style.width = `${midWidth}px`;\n\n      this.emit('onScale', this.getVisibleRange());\n    });\n\n    this._bindSlider(right, (e) => {\n      let diff = e.movementX;\n      let prevMidWidth = mid.getBoundingClientRect().width;\n      let midWidth =  prevMidWidth + diff;\n      if (midWidth < config.sliderMinWidth) {\n        diff = config.sliderMinWidth - prevMidWidth;\n        midWidth = prevMidWidth + diff;\n      }\n\n      let overflowRightWidth = overflowRight.getBoundingClientRect().width - diff;\n      if (overflowRightWidth < rightWidth) {\n        midWidth += overflowRightWidth - rightWidth;\n        overflowRightWidth = rightWidth;\n      }\n\n      overflowRight.style.width = `${overflowRightWidth}px`;\n      mid.style.width = `${midWidth}px`;\n      this.emit('onScale', this.getVisibleRange());\n    });\n\n    this._bindSlider(mid, (e) => {\n      let diff = e.movementX;\n\n      let overflowLeftWidth = overflowLeft.getBoundingClientRect().width + diff;\n      if (overflowLeftWidth < leftWidth) {\n        diff += leftWidth - overflowLeftWidth;\n        overflowLeftWidth = leftWidth;\n      }\n\n      let overflowRightWidth = overflowRight.getBoundingClientRect().width - diff;\n      if (overflowRightWidth < rightWidth) {\n        diff -= rightWidth - overflowRightWidth;\n        overflowRightWidth = rightWidth;\n        overflowLeftWidth = overflowLeft.getBoundingClientRect().width + diff;\n      }\n\n      overflowLeft.style.width = `${overflowLeftWidth}px`;\n      overflowRight.style.width = `${overflowRightWidth}px`;\n      this.emit('onChange', this.getVisibleRange());\n    });\n  }\n\n  _bindSlider(UI, cb) {\n    let self = this;\n    const doc = UI.ownerDocument;\n\n    UI.addEventListener('mousedown', initDrag);\n    function initDrag() {\n      doc.addEventListener('mouseup', stopDrag)\n      subscribeOnMove();\n    }\n\n    function stopDrag() {\n      unsubscribeOnMove();\n      doc.removeEventListener('mouseup', stopDrag);\n    }\n\n    function subscribeOnMove() {\n      self._parentNode.addEventListener('mousemove', moveListener);\n    }\n\n    function unsubscribeOnMove() {\n      self._parentNode.removeEventListener('mousemove', moveListener);\n    }\n\n    function moveListener(e) { cb(e); }\n  }\n\n}\n\nexport default Slider\n","import Logger from '../../services/Logger'\nimport BaseSVG from '../../svg/base'\nimport _ from '../../services/utils'\n\nimport { G, Path, SVG } from  '../../svg/index'\n\nimport html from './index.html'\nimport styles from './styles.css'\n\nimport Slider from './Slider'\n\nclass Preview extends BaseSVG {\n  static LOG_LEVEL = 10\n\n  /**\n   * @param {DOMElement} parentNode\n   * @param {Object} config\n   *  @key {Object} slider\n   *    @key {Number} sliderX, default=100\n   *    @key {Number} sliderWidth, default=300\n   */\n  constructor(parentNode, config = {}) {\n\t\tsuper()\n\n    this._parentNode = parentNode;\n    this._data = {};\n\n    let doc = parentNode.ownerDocument.createElement('div');\n    doc.innerHTML = html;\n    let currentNode = doc.firstChild;\n    this._parentNode.append.apply(this._parentNode, doc.childNodes);\n\n    this._svg = null;\n    this._g = null;\n\n    this._x1 = null;\n    this._x2 = null;\n    this._slider = new Slider(currentNode, config.slider)\n    let [x1, x2] = this._slider.getVisibleRange();\n\n    this._x1 = x1;\n    this._x2 = x2;\n    this._slider.subscribe('onChange', ([x1, x2]) => {\n      this._x1 = x1;\n      this._x2 = x2;\n\n      let data = _.first(this._data).scaledData;\n      this.emit('onChange', data, [this._x1, this._x2], [data.xRatio, data.yRatio]);\n    });\n\n    this._slider.subscribe('onScale', ([x1, x2]) => {\n      this._x1 = x1;\n      this._x2 = x2;\n\n      let data = _.first(this._data).scaledData;\n      this.emit('onScale', data, [this._x1, this._x2], [data.xRatio, data.yRatio]);\n    });\n  }\n\n  /**\n   * PubSub mixin\n   */\n  subscribe(eventType, cb) {\n    if (!this.__subs)\n      this.__subs = {};\n\n    let subs = this.__subs[eventType] || [];\n    subs.push(cb);\n\n    this.__subs[eventType] = subs;\n  }\n\n  emit(eventType) {\n    if (!this.__subs)\n      this.__subs = {};\n\n    let subs = this.__subs[eventType];\n    let args = Array.prototype.slice.call(arguments, 1);\n    _.forEach(subs, sub => {\n      sub.apply(null, args);\n    });\n  }\n\n  /**\n   * Remove all nodes from svg\n   */\n  clean() {\n    this._g.clean();\n    this._data = {}\n  }\n\n  enable(id) {\n    let data = this._data[id];\n    if (!data)\n      return;\n\n    if (data.enabled)\n      return;\n\n    this._drawPath(id);\n  }\n\n  disable(id) {\n    let data = this._data[id];\n    if (!data)\n      return;\n\n    if (!data.enabled)\n      return;\n\n    data.path.element.remove();\n    data.path = null;\n    data.enabled = false;\n  }\n\n  /**\n   * @param {GraphData} data\n   * @param {Object} opts\n   *  @key {Number} xPadding\n   *  @key {Number} yPadding\n   * @param {Object} config\n   *  @key {String} svgId\n   */\n  draw(data = null, opts = {}, config = {}) {\n    if (!this._svg) {\n      this._svg = new SVG()\n      let previewNode = this._parentNode.querySelector('.preview');\n      this._svg.draw(previewNode, {fillIn: true});\n    }\n\n    if (!this._g) {\n      this._g = new G();\n      this._g.draw(this._svg.element, null, {id: config.svgId});\n    }\n\n    if (data)\n      this.drawOn(data, opts, config);\n  }\n\n  /**\n   * @param {GraphData} data\n   * @opts {Object} opts\n   *  @key {Number} xPadding\n   *  @key {Number} yPadding\n   */\n  drawOn(data, opts = {}, config = {}) {\n    const xPadding = opts.xPadding || 0;\n    const yPadding = opts.yPadding || 0;\n    this._data[data.id] = {data: data}\n    let scaledData = this._data[data.id].scaledData = data.scaleTo(this._svg.width - xPadding * 2, this._svg.height - yPadding * 2);\n    //TODO: not good\n    this._data[data.id].xPadding = xPadding;\n    this._data[data.id].yPadding = yPadding;\n\n    this._drawPath(data.id);\n    this.emit('onDraw', data,\n      [this._x1, this._x2],\n      [scaledData.xRatio, scaledData.yRatio],\n      scaledData.proportion);\n\n    //hack\n    this.emit('onScale', scaledData, [this._x1, this._x2], [scaledData.xRatio, scaledData.yRatio]);\n  }\n\n  _drawPath(dataId) {\n    let { scaledData, xPadding, yPadding, data } = this._data[dataId]\n    let { coords } = scaledData;\n\n    let path = new Path();\n    let [x, y] =  coords[0];\n    path.moveTo(x + xPadding, y + yPadding);\n\n    for (let i = 1, length = coords.length; i < length; i++) {\n      let [x, y] = coords[i];\n      path.lineTo(x + xPadding, y + yPadding);\n    }\n    path\n      .className('preview_line')\n      .attr({stroke: data.color})\n      .attr({transform: `scale(1, -1) translate(0, -${this._svg.height})`})\n\n    this._data[dataId].path = path;\n    this._data[dataId].enabled = true;\n    this._g.append(path);\n  }\n}\n\nexport default Preview\n","module.exports=[{columns:[[\"x\",15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5],[\"y0\",37,20,32,39,32,35,19,65,36,62,113,69,120,60,51,49,71,122,149,69,57,21,33,55,92,62,47,50,56,116,63,60,55,65,76,33,45,64,54,81,180,123,106,37,60,70,46,68,46,51,33,57,75,70,95,70,50,68,63,66,53,38,52,109,121,53,36,71,96,55,58,29,31,55,52,44,126,191,73,87,255,278,219,170,129,125,126,84,65,53,154,57,71,64,75,72,39,47,52,73,89,156,86,105,88,45,33,56,142,124,114,64],[\"y1\",22,12,30,40,33,23,18,41,45,69,57,61,70,47,31,34,40,55,27,57,48,32,40,49,54,49,34,51,51,51,66,51,94,60,64,28,44,96,49,73,30,88,63,42,56,67,52,67,35,61,40,55,63,61,105,59,51,76,63,57,47,56,51,98,103,62,54,104,48,41,41,37,30,28,26,37,65,86,70,81,54,74,70,50,74,79,85,62,36,46,68,43,66,50,28,66,39,23,63,74,83,66,40,60,29,36,27,54,89,50,73,52]],types:{y0:\"line\",y1:\"line\",x:\"x\"},names:{y0:\"#0\",y1:\"#1\"},colors:{y0:\"#3DC23F\",y1:\"#F34C44\"}},{columns:[[\"x\",15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5],[\"y0\",6706,7579,7798,8307,7866,7736,7816,7630,7536,7105,7178,7619,7917,7483,5772,5700,5435,4837,4716,4890,4753,4820,4538,12162,39444,25765,18012,14421,13249,11310,10377,9399,8917,8259,7902,9442,47596,36160,23866,18500,15488,13722,12270,13413,10574,7092,7159,7880,8821,8306,7780,7963,7837,7611,7334,7413,7015,6742,6557,6593,6680,6725,6345,5988,6365,9911,28833,19694,14873,11911,10498,9708,8893,8365,7960,7694,45529,42858,31508,23289,19147,15874,14551,13124,11778,10809,10522,9918,9436,8617,8765,8194,8035,7865,7573,7422,7047,7147,6861,6669,6363,12073,32381,21390,15311,12819,11655,10696,9678,9143,8296,7852],[\"y1\",3522,4088,4146,4477,4202,4157,4177,4203,4223,3948,3946,3898,3979,4052,3279,3229,3302,3040,3054,2982,3077,2965,2973,5148,22485,13077,9055,7446,6824,5995,5787,5367,4997,4689,4630,4785,22365,15244,10626,8666,7681,6929,6219,6367,5402,4932,4844,5146,5265,4887,4714,4722,4718,4693,4746,4819,4455,4419,4323,4407,4277,11589,6100,5076,4769,8929,14002,9756,7520,6343,5633,5415,5052,4850,4624,4480,14102,24005,14263,10845,9028,7755,7197,7001,6737,6254,6150,5922,5603,5048,5423,5003,5035,4747,4814,4661,4462,4516,4221,4111,4053,12515,15781,10499,8175,6831,6287,5990,5590,5148,4760,4809]],types:{y0:\"line\",y1:\"line\",x:\"x\"},names:{y0:\"#0\",y1:\"#1\"},colors:{y0:\"#3DC23F\",y1:\"#F34C44\"}},{columns:[[\"x\",15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5],[\"y0\",4747,4849,5045,5184,5746,5400,5424,5576,6436,5337,4840,5379,4678,4736,5074,4897,4349,5089,4543,5033,5047,4871,4812,4723,4545,4723,4721,4384,4277,4682,4805,4001,4610,5241,5113,4059,4529,4673,5291,5154,5123,5535,5540,5161,5666,5584,6999,6854,5083,5361,5863,5792,5586,6106,5481,5532,5853,5809,6244,6156,5596,5426,5422,5413,4795,5113,5279,5530,4939,4983,4984,5527,5765,5001,5818,6061,5956,5288,5837,5703,5440,5238,5957,6432,6389,6064,7065,5981,5779,6567,6320,5634,6023,5702,6066,5797,6163,6182,4906,5637,7073,6679,5831,6015,6266,6128,6156,6218,6050,6140,5877,7147],[\"y1\",4605,5036,4956,5168,5008,5069,5223,5360,5695,5209,4796,5028,4931,5123,4987,4964,4982,5037,5050,5144,5049,4971,4911,4792,4562,4597,4759,4761,4646,4543,4597,4428,4213,4270,3961,4784,4699,4711,4855,4717,4563,4923,5041,4895,4877,5001,5410,5033,5045,5184,4976,5207,5354,5205,4887,4831,5083,5148,5369,5176,5022,4880,4969,5135,4836,4764,4782,4783,4646,4755,4744,4932,5059,4851,4614,4718,5018,5034,5223,5007,4839,4763,4761,5048,5330,5106,5956,5135,5006,4919,5511,5114,5122,5314,5089,5022,4918,4986,4626,4675,4951,4921,5173,5145,5209,4967,5030,5120,5030,4946,4795,5224]],types:{y0:\"line\",y1:\"line\",x:\"x\"},names:{y0:\"#0\",y1:\"#1\"},colors:{y0:\"#3DC23F\",y1:\"#F34C44\"}},{columns:[[\"x\",15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5],[\"y0\",41,31,62,65,66,79,52,26,42,68,71,86,65,54,33,70,52,68,75,92,69,28,33,84,65,56,42,44,26,34,45,49,83,83,66,31,43,55,57,55,54,45,51,64,27,19,38,38,44,49,42,50,60,73,86,65,51,54,48,61,82,83,53,52,48,64,96,103,68,73,58,42,81,80,76,106,93,65,69,104,75,79,92,73,49,63,76,79,83,70,55,47,42,111,93,74,99,107,52,65,80,82,74,154,106,39,40,77,85,66,52,25],[\"y1\",19,10,36,41,28,39,24,16,14,40,39,37,47,28,16,32,25,29,36,45,38,11,25,37,35,22,25,30,16,20,32,34,37,26,31,10,19,32,34,23,25,22,21,18,11,18,18,23,11,18,22,19,27,27,30,25,27,23,28,30,23,31,27,16,30,21,36,33,25,34,16,24,37,33,26,24,31,21,37,32,35,31,30,27,15,17,38,40,32,34,30,17,21,28,36,30,24,25,20,24,22,42,34,47,40,29,29,31,39,30,29,18]],types:{y0:\"line\",y1:\"line\",x:\"x\"},names:{y0:\"#0\",y1:\"#1\"},colors:{y0:\"#3DC23F\",y1:\"#F34C44\"}},{columns:[[\"x\",15200352e5,15201216e5,1520208e6,15202944e5,15203808e5,15204672e5,15205536e5,152064e7,15207264e5,15208128e5,15208992e5,15209856e5,1521072e6,15211584e5,15212448e5,15213312e5,15214176e5,1521504e6,15215904e5,15216768e5,15217632e5,15218496e5,1521936e6,15220224e5,15221088e5,15221952e5,15222816e5,1522368e6,15224544e5,15225408e5,15226272e5,15227136e5,15228e8,15228864e5,15229728e5,15230592e5,15231456e5,1523232e6,15233184e5,15234048e5,15234912e5,15235776e5,1523664e6,15237504e5,15238368e5,15239232e5,15240096e5,1524096e6,15241824e5,15242688e5,15243552e5,15244416e5,1524528e6,15246144e5,15247008e5,15247872e5,15248736e5,152496e7,15250464e5,15251328e5,15252192e5,15253056e5,1525392e6,15254784e5,15255648e5,15256512e5,15257376e5,1525824e6,15259104e5,15259968e5,15260832e5,15261696e5,1526256e6,15263424e5,15264288e5,15265152e5,15266016e5,1526688e6,15267744e5,15268608e5,15269472e5,15270336e5,152712e7,15272064e5,15272928e5,15273792e5,15274656e5,1527552e6,15276384e5,15277248e5,15278112e5,15278976e5,1527984e6,15280704e5,15281568e5,15282432e5,15283296e5,1528416e6,15285024e5,15285888e5,15286752e5,15287616e5,1528848e6,15289344e5,15290208e5,15291072e5,15291936e5,152928e7,15293664e5,15294528e5,15295392e5,15296256e5,1529712e6,15297984e5,15298848e5,15299712e5,15300576e5,1530144e6,15302304e5,15303168e5,15304032e5,15304896e5,1530576e6,15306624e5,15307488e5,15308352e5,15309216e5,1531008e6,15310944e5,15311808e5,15312672e5,15313536e5,153144e7,15315264e5,15316128e5,15316992e5,15317856e5,1531872e6,15319584e5,15320448e5,15321312e5,15322176e5,1532304e6,15323904e5,15324768e5,15325632e5,15326496e5,1532736e6,15328224e5,15329088e5,15329952e5,15330816e5,1533168e6,15332544e5,15333408e5,15334272e5,15335136e5,15336e8,15336864e5,15337728e5,15338592e5,15339456e5,1534032e6,15341184e5,15342048e5,15342912e5,15343776e5,1534464e6,15345504e5,15346368e5,15347232e5,15348096e5,1534896e6,15349824e5,15350688e5,15351552e5,15352416e5,1535328e6,15354144e5,15355008e5,15355872e5,15356736e5,153576e7,15358464e5,15359328e5,15360192e5,15361056e5,1536192e6,15362784e5,15363648e5,15364512e5,15365376e5,1536624e6,15367104e5,15367968e5,15368832e5,15369696e5,1537056e6,15371424e5,15372288e5,15373152e5,15374016e5,1537488e6,15375744e5,15376608e5,15377472e5,15378336e5,153792e7,15380064e5,15380928e5,15381792e5,15382656e5,1538352e6,15384384e5,15385248e5,15386112e5,15386976e5,1538784e6,15388704e5,15389568e5,15390432e5,15391296e5,1539216e6,15393024e5,15393888e5,15394752e5,15395616e5,1539648e6,15397344e5,15398208e5,15399072e5,15399936e5,154008e7,15401664e5,15402528e5,15403392e5,15404256e5,1540512e6,15405984e5,15406848e5,15407712e5,15408576e5,1540944e6,15410304e5,15411168e5,15412032e5,15412896e5,1541376e6,15414624e5,15415488e5,15416352e5,15417216e5,1541808e6,15418944e5,15419808e5,15420672e5,15421536e5,154224e7,15423264e5,15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5,15520896e5],[\"y0\",2298660,2253410,2515820,2506600,2460240,2408400,2317430,2240100,2295900,2609800,2594200,2626400,2615e3,2617800,2394500,2391100,2608300,2676e3,2637700,2766600,3186500,3067700,2570700,2935e3,2949200,2913500,2763600,3216300,2343500,2361e3,258e4,2591800,2595200,2569500,2587700,2372500,2351200,2465600,2625100,2651300,2686700,2783300,2417400,2383800,2736300,2751100,2678900,2622300,2586e3,2365700,2407700,2541300,2600400,2581500,2576200,2550100,2334500,2139400,2015400,2019900,2210100,2191800,2240700,2107400,2026900,2258e3,2255200,2123200,2267800,2236100,2065700,2093300,2315300,2333200,2349800,2318300,2275e3,2110300,2077100,2335200,2357400,235e4,2293800,2303600,2118700,2100300,2219700,2361100,2349500,2347800,2318400,2141600,2178600,2432500,2448700,2440300,2450100,2424100,2229900,2152400,2402600,2401e3,2418100,2408600,2408400,2212600,2189e3,2450800,2444500,2451900,2451e3,2442600,2287900,2221100,2451900,2460200,2460900,2319900,2270300,2183800,2195300,2485e3,2460900,2500600,2495300,2479100,2290600,2235800,2459900,2484500,2491e3,2525600,2477300,2223700,2146700,2528200,2567800,2556300,2540700,2503e3,2301200,2251600,2538600,2596500,2553900,2534200,2527300,2337400,2332900,2688500,2585700,2559600,2651600,2586800,2445700,2472300,2633e3,2664600,2649400,2648900,2644600,2406400,2426200,2694e3,2740600,2711800,2700900,2645800,2422800,2438500,2697500,2712500,2690300,2684400,2517300,2435300,2444300,2781800,2807800,2804500,2771300,2798800,2633300,2597100,2946300,2889800,2949600,2951400,2928800,2701400,2709900,3012900,3019100,2977200,3012400,2989800,2752100,2749100,3033300,3050400,3023800,3066400,3047800,2792200,2799300,3096100,3132500,3082400,3071200,3021400,2818300,2737500,3037800,3123700,3138900,3181800,3118500,2834500,2826900,3171e3,3175900,3184300,3195800,3129100,2834100,2876800,3019e3,3214e3,3227900,3189600,3187800,2886800,2880500,3218200,3253700,3260400,3243300,3204e3,2962700,2968600,3282100,3618900,3017e3,3037300,3044500,2758900,2784600,3032900,3132400,3075800,3108200,3076200,2851800,2837800,3107500,3146800,3145100,3145300,3158400,2872100,2823800,3190400,3209300,3170800,3195300,3183e3,2910300,2937400,3297100,3293600,3278400,3234200,3224e3,3013900,2955300,3303900,3323300,3352600,3348400,3340600,3110600,3066400,3409200,3462100,3394200,3383100,3433700,3184e3,3092700,3417400,4505200,3094500,3106100,3083200,3005600,2866700,2984100,2954200,3086800,3070500,3040900,2903500,3592500,3316200,2930500,2961900,3009600,3027200,2871600,2831600,2881700,3054200,3116600,3120800,3157300,2950700,2982700,3192800,3223300,3219500,3235900,3214100,3004400,2963500,3280400,3262400,3256e3,3258400,3264900,3107500,3057400,3326600,3332400,3357e3,3365100,3359500,3127400,3130200,3367100,3422700,3436400,3431100,36e5,3146100,3170900,3467300,3483400,3473600,3454700,3390200,3213600,3188800,3498200,3498600,3493500,3478900,3446400,3239200,3229100,3559600,3563600,3549800,3577300,3524400,3282500,3271300,3599200,3575200,3554400,3540300,3450600,2812e3],[\"y1\",1130400,1065370,1211030,1215590,1206540,1206720,1085450,1047320,1071720,1253170,1261050,1264660,1260240,1264840,1130440,1121660,1294120,1290780,1284540,1302860,1296810,1165450,1128830,1302070,1304470,1307090,1268e3,1302160,1159330,1163530,1327140,1320680,1319200,1306810,1287990,1121240,1145070,1132400,1310310,1329340,1340060,1333530,1167040,1153260,1356930,1366500,1375970,1378570,1357460,1192240,1188650,1386450,1400570,1395730,1404160,1378120,1195410,1082e3,1189660,1197540,1367850,1389070,1386300,1282240,1209450,1409070,1409450,1271120,1424860,1399990,1240640,1248530,1451770,1460240,1466100,1460990,1446730,1268830,1263270,1473530,1476230,1480760,1460520,1454730,1263910,1227240,1303900,1474760,1473400,1477380,1466790,1285620,1280100,1491820,1499660,1496260,1485990,1473140,1301290,1273440,1487420,1494560,1500790,1508660,1489400,1301960,1297680,1501170,1503e3,1488980,1501170,1479060,1367980,1296050,1493920,1487830,1479120,1338410,1318550,1266620,1285640,1487970,1489080,1489580,1475400,1471140,1316010,1271940,1476160,1480670,1491030,1480940,1477640,1305750,1296770,1483400,1494440,1495740,1485900,1484400,1319160,1284010,1488140,1502910,1503450,1485410,1498200,1323200,1303150,1506840,1523440,1521490,1516770,1504300,1327520,1307630,1518100,1521370,1521280,1521660,1517700,1349880,1333010,1543800,1553730,1546490,1541710,1532690,1367020,1354040,1560080,1564990,1565050,1561110,1406570,1340850,1368550,1600180,1630760,1621360,1636580,1652580,1489550,1465750,1731080,1730190,1732260,1730210,1724800,1519480,1520490,1758280,1774530,1770690,1781100,1762270,1551690,1541620,1787290,1795490,1802940,1799130,1778850,1560040,1564580,1822410,1819680,1812390,1814100,1798060,1587880,1589320,1833920,1843420,1851460,1845550,1822980,1596860,1595900,1866e3,1860480,1862600,1863950,1827540,1585280,1588970,1683930,1879500,1883300,1879040,1846160,1639090,1632580,1895780,1897620,1906e3,1906730,1895290,1670120,1670190,1914360,1932890,1933160,1921800,1898720,1673530,1685190,1937730,1951850,1949900,1949020,1923160,1718450,1704040,1964800,1975140,2002510,1985340,1959ey2\",820900,766050,894390,894540,887590,814490,786610,744660,770920,930330,930190,942060,933690,922280,810770,809760,952010,959070,957020,955890,948250,825710,804970,958480,959090,970200,907010,950150,825240,820890,971020,973560,967940,960360,931820,795020,753860,808740,97e4,981020,979810,975840,829690,819300,992290,998040,1006540,1013790,995130,848190,851890,1024210,1032210,1032290,1027510,1010090,850110,741740,844400,850410,1006690,1018470,1011630,916990,861050,1039650,1032640,904200,1045560,1022330,888970,896300,1073460,1074860,1074820,1074880,1057340,909410,906710,1078860,1092760,1083360,1078680,1067310,903090,858360,947540,1089590,1095060,1093130,1070660,915380,916530,1108410,1109460,1097230,1094520,1074630,915520,915750,1101730,1104580,1107930,1116850,1106360,928500,928210,1110530,1103230,1099970,1106180,1096060,982050,932620,1100880,1099970,1080040,959480,951360,902160,916070,1094120,1092530,1089290,1081760,1073320,937320,900010,1084910,1082620,1080960,1074050,1077810,925090,913970,1082900,1089240,1088890,1088720,1084170,938750,904060,1091540,1093660,1104520,1085860,1091880,939720,919790,1098590,1110310,1105580,1105220,1096580,940670,923480,1102360,1102760,1102280,1108680,1109210,955490,944730,1125380,1127440,1123070,1123910,1121160,966340,946940,1141980,1146790,1147420,1132920,990870,946370,964610,1171550,1187e3,1186370,1199100,1213ee3,1401510,1189880,1309810,1380230,1383630,1254140,1216830,1243860,1442240,1481680,1480680,1490700,1315410,1300930,1530520,1532340,1539150,1541510,1532770,1344910,1325530,1563330,1568490,1580110,1575130,1564880,1369810,1359060,1608230,1605640,1605970,1601640,1590810,1381740,1375190,1625850,1621800,1629910,1628510,1609760,1397880,1392180,1647700,1646770,1644200,1667150,1610910,1408450,1395010,1652870,1658870,1660310,1659060,1629490,1435450,1407720,1675610,1682450,1682070,1693010,1669030,1448500,1439490,1710110,1702690,1707e3,1662770,1512800,1101660],[\"y3\",409540,377260,456380,460230,452020,389350,397230,369e3,382180,473570,477470,477550,478030,466150,397480,406380,494570,494680,482810,487700,475090,400520,397940,484160,487740,493260,434500,475410,398650,404690,491980,493410,485250,484740,465490,377460,353960,396390,493300,497560,495110,485260,394770,402910,500540,506260,509680,514010,494350,405360,412560,513030,521320,515730,518170,499850,394960,328510,406450,408080,501980,507800,496990,442530,414260,525770,513440,442660,526810,500190,426220,436110,546820,543480,545420,540530,527770,431050,443100,549550,551600,548120,542290,528810,435370,407250,463200,553640,554110,555820,536470,440460,447740,563330,561850,556430,550910,539440,441200,442310,563100,563760,559230,570870,555280,447750,455570,564630,562510,556050,555560,556470,484080,451320,561060,553630,540660,473500,472500,438550,447590,548670,549580,539920,541510,540380,450260,432260,535950,545160,543810,536990,539680,446570,444470,543450,549070,547840,541430,540200,450080,431800,549290,545890,556300,536500,543890,450890,440180,550850,554740,553460,553440,546420,446710,436640,553270,547750,551920,547610,545500,449220,447510,560050,561560,561560,556630,559340,461630,456300,569070,574800,575220,566180,472200,450530,462960,590290,597250,592970,604870,613050,512200,495980,649860,645070,636950,647120,630390,518820,525990,661700,659770,660650,669560,644510,529610,539520,673850,668530,673770,669480,654540,536090,548400,690100,684900,687040,685940,666360,560140,553050,696740,694490,703e3,697980,674460,548230,557370,697150,700110,701170,695810,669780,543500,540170,597430,711500,699770,698520,682170,568380,572950,715580,716050,720770,720660,695220,572970,578170,722280,724280,727910,719820,699840,580870,586270,729850,733680,726590,731270,709330,593070,600500,743590,743690,767660,747140,730510,607540,610480,762440,772960,763480,758490,741090,614450,645760,831130,792100,780410,778620,761e3,643620,650320,802640,805900,803960,800580,783660,648310,668150,825940,818650,816630,821e3,782790,657850,671660,817660,816020,821380,816280,800240,712510,648060,711170,709110,802240,792710,772260,691490,636050,649450,566120,651310,701910,702270,627880,605290,621710,744830,762830,765640,764140,648720,642430,786580,778790,780060,789170,772600,652160,648950,795360,802250,808010,801890,793490,669240,665310,814370,810880,814580,813950,802070,670450,674250,823010,820620,821400,820760,804300,681870,681460,831580,835600,835390,840770,810700,675170,680870,832e3,836790,845630,844560,821810,690310,683810,851150,848090,846480,858340,831290,696470,695540,866980,868190,861720,834530,706650,439140]],types:{y0:\"line\",y1:\"line\",y2:\"line\",y3:\"line\",x:\"x\"},names:{y0:\"#0\",y1:\"#1\",y2:\"#2\",y3:\"#3\"},colors:{y0:\"#cb513a\",y1:\"#73c03a\",y2:\"#65b9ac\",y3:\"#4682b4\"}}];","import _ from '../services/utils'\nimport Logger from '../services/Logger'\n\nclass GraphData {\n  static id = 0\n\n  /**\n   * @param {Array} xValues\n   * @param {Array} yValues\n   */\n  constructor(xValues, yValues, color, name) {\n    GraphData.id++;\n    this.id = GraphData.id;\n    this.console = new Logger(`Graph #${this.id}`, 0)\n    this._values = [];\n    this._coords = [];\n    this._minXValue = null;\n    this._maxXValue = null;\n    this._minYValue = 0;\n    this._maxYValue = null;\n    this._color = color;\n    this._name = name;\n\n    if (!_.isArray(xValues)) {\n      this.console.error(`xValues should be array, but it's ${xValues}. Exit`);\n      return;\n    }\n\n    if (!_.isArray(yValues)) {\n      this.console.error(`yValues should be array, but it's ${yValues}. Exit`);\n      return;\n    }\n\n    if (xValues.length != yValues.length)\n      this.console.warn(`Array length mismatch x[length]=${xValues.length}, y[length] = ${yValues.length}`);\n\n    _.forEach(xValues, (xValue, i) => {\n      let yValue = yValues[i];\n\n      if (this._minXValue === null || this._minXValue > xValue)\n        this._minXValue = xValue;\n\n      /*\n      if (this._minYValue === null || this._minYValue > yValue)\n        this._minYValue = yValue;\n        */\n\n      if (this._maxXValue === null || this._maxXValue < xValue)\n        this._maxXValue = xValue;\n\n      if (this._maxYValue === null || this._maxYValue < yValue)\n        this._maxYValue = yValue;\n\n      this._values.push([xValue, yValue]);\n    })\n\n    this._values = this._values.sort((a, b) => (a[0] - b[0]));\n  }\n\n  /**\n   * @param {Number} width, in px\n   * @param {Number} height, in px\n   */\n  scaleTo(width, height) {\n    this.console.log(5, `Scale data to width=${width}px and height=${height}`);\n    let xRange = this._maxXValue - this._minXValue;\n    let yRange = this._maxYValue - this._minYValue;\n\n    let xRatio = (width / xRange)\n    let yRatio = (height / yRange)\n    let coords = [];\n    _.forEach(this._values, ([x, y]) => {\n      coords.push([ (x - this._minXValue) * xRatio, (y - this._minYValue) * yRatio ]);\n    })\n\n    return {\n      id: this.id,\n      coords: coords,\n      xRatio: xRatio,\n      yRatio: yRatio,\n      proportion: width / height\n    }\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get coords() {\n    return this._coords;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get minXValue() {\n    return this._minXValue;\n  }\n  get maxYValue() {\n    return this._maxYValue;\n  }\n\n  get maxXValue() {\n    return this._maxXValue;\n  }\n\n  get values() {\n    return this._values;\n  }\n\n  [Symbol.iterator]() {\n    let i = 0;\n    let self = this;\n    return {\n      next() {\n        i++;\n\n        return {\n          value: self._coords[i - 1],\n          done: (i  + 1) == self._coords.length\n        }\n      }\n    }\n  }\n}\n\nexport default GraphData\n","import SVG from './svg/SVG'\nimport Plot from './components/Plot/index'\nimport Preview from './components/Preview/index'\nimport _ from './services/utils'\n\nimport data from './data/chart_data.json'\nimport GraphData from './data/graph'\n\nrender(data[0], 'app1');\n\nrender(data[1], 'app2');\n\nrender(data[2], 'app3');\n\nrender(data[3], 'app4');\n\nrender(data[4], 'app5');\n\nfunction render(data, id) {\n  let inited = false;\n  // TODO: move to components\n  let svg = new SVG(window.document)\n  let app = document.getElementById(id);\n  svg = svg.draw(app, { width:  300, height: 200 });\n  let plot = new Plot(svg);\n  plot.draw();\n\n  let preview = new Preview(app);\n\n  let types = data.types;\n  let lines = 0;\n  for (let k in types) {\n    if (types[k] == 'line') {\n      lines++;\n    }\n  }\n\n  let x = data.columns[0];\n  if (x[0] !== 'x')\n    throw new Error(\"First column doesn't contain x coords\");\n\n  let datas = []\n  x = x.slice(1);\n  for (let i = 0; i < lines; i++) {\n    let y = data.columns[i + 1]\n    let yName = y[0]\n    y = y.slice(1);\n    let color = data.colors[yName];\n    let name = data.names[yName];\n    let graphData = new GraphData(x, y, color, name);\n    datas.push(graphData);\n  }\n\n  preview.draw(null, null);\n  preview.clean();\n\n  plot.clean();\n  if (!inited) {\n    plot.linkWith(preview);\n    inited = true;\n  }\n\n  _.forEach(datas, graphData => {\n    preview.drawOn(graphData, {xPadding: 12, yPadding: 5})\n  })\n}\n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var getBundleURL = require('./bundle-url').getBundleURL;\n\nfunction loadBundlesLazy(bundles) {\n  if (!Array.isArray(bundles)) {\n    bundles = [bundles]\n  }\n\n  var id = bundles[bundles.length - 1];\n\n  try {\n    return Promise.resolve(require(id));\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      return new LazyPromise(function (resolve, reject) {\n        loadBundles(bundles.slice(0, -1))\n          .then(function () {\n            return require(id);\n          })\n          .then(resolve, reject);\n      });\n    }\n\n    throw err;\n  }\n}\n\nfunction loadBundles(bundles) {\n  return Promise.all(bundles.map(loadBundle));\n}\n\nvar bundleLoaders = {};\nfunction registerBundleLoader(type, loader) {\n  bundleLoaders[type] = loader;\n}\n\nmodule.exports = exports = loadBundlesLazy;\nexports.load = loadBundles;\nexports.register = registerBundleLoader;\n\nvar bundles = {};\nfunction loadBundle(bundle) {\n  var id;\n  if (Array.isArray(bundle)) {\n    id = bundle[1];\n    bundle = bundle[0];\n  }\n\n  if (bundles[bundle]) {\n    return bundles[bundle];\n  }\n\n  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();\n  var bundleLoader = bundleLoaders[type];\n  if (bundleLoader) {\n    return bundles[bundle] = bundleLoader(getBundleURL() + bundle)\n      .then(function (resolved) {\n        if (resolved) {\n          module.bundle.register(id, resolved);\n        }\n\n        return resolved;\n      }).catch(function(e) {\n        delete bundles[bundle];\n        \n        throw e;\n      });\n  }\n}\n\nfunction LazyPromise(executor) {\n  this.executor = executor;\n  this.promise = null;\n}\n\nLazyPromise.prototype.then = function (onSuccess, onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.then(onSuccess, onError)\n};\n\nLazyPromise.prototype.catch = function (onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.catch(onError)\n};\n","module.exports = function loadHTMLBundle(bundle) {\n  return fetch(bundle).then(function (res) {\n    return res.text();\n  });\n};\n"]}